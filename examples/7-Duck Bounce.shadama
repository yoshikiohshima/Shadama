program "Duck Bounce"

breed Turtle (pos:vec2, d:vec2, color:vec4, orig:vec2)
breed Filler (pos:vec2)
patch Field (n:vec2, color:vec4)

data Duck("ahiru.png", "image")

def clear(field:object) {
  field.color = vec4(0, 0, 0, 0)
  field.n = vec2(0, 0)
}

def fillCircle(c:vec2, r:float, field:object) {
  var d = this.pos:vec2 - c
  var dr = distance(this.pos:vec2, c)
  if (dr < r) {
    field.color = vec4(0.2, 0.2, 0.8, 1.0)
    field.n = d / r;
  }
}

def remember() {
  this.orig = this.pos:vec2;
}

def fillD() {
  this.d = vec2(0, 0)
}
 
def bounce(field:object, time:float) {
  var n = field.n:vec2
  var d = this.d:vec2 + vec2(0, -0.01)
  var origV = distance(d, vec2(0, 0))
  var dot = dot(d, n)
  var r = d;

  if (dot < 0.0) {
    r = d - (2.0 * dot * n)
    var norm = length(r)
    r = r / (norm / origV)
  }

  var new = this.pos:vec2 + d;
  var newX = new.x
  var newY = new.y

  if (newX < 0.0) {
    newX = -newX;
    r = vec2(r.x * -0.9, r.y)
  }
  if (newX > u_resolution.x) {
    newX = u_resolution.x - (newX - u_resolution.x);
    r = vec2(r.x * -0.9, r.y)
  }
  if (newY < 0.0) {
    newY = mod(newY, u_resolution.y);
    r = vec2(r.x, -0.1)
  }
  if (newY > u_resolution.y) {
    newY = u_resolution.y - (newY - u_resolution.y);
    r = vec2(r.x, -r.y);
  }

  if (mod(floor(time), 10.0) == 0.0) {
    this.pos = this.orig:vec2
  } else {
    this.pos = vec2(newX, newY)
  }
  this.d = r
}

static loop() {
  Filler.clear(Field);
  Filler.fillCircle(vec2(mousemove.x, mousemove.y), 20, Field)
  Turtle.bounce(Field, time)
  Display.clear()
  Field.draw()
  Turtle.draw()
}

static setup() {
  Filler.fillSpace("pos", vec2(512, 512))
  Turtle.fillImage("pos", "color", Duck)
  Turtle.remember()
  Turtle.fillD()
  loop.start()
}

