program "Bounce"

breed Turtle (pos:vec2, d:vec2, color:vec4)
breed Filler (pos:vec2)
patch Field (n:vec2, color:vec4)

def setColor() {
  this.color = vec4(this.pos:vec2 / 512.0, 0, 1)
}

def clear(field:object) {
  field.color = vec4(0, 0, 0, 0)
  field.n = vec2(0, 0)
}

def fillCircle(c:vec2, r:float, field:object) {
  var d = this.pos:vec2 - c
  var dr = sqrt(d.x * d.x + d.y * d.y);
  if (dr < r) {
    field.color = vec4(0.2, 0.2, 0.8, 1.0);
    field.n = d / r;
  }
}

def zeroDir() {
  this.d = vec2(0, 0);
}
 
def bounce(field:object) {
  var n = field.n:vec2;
  var d = this.d:vec2;
  var dot = d.x * n.x + d.y * n.y;
  var origV = sqrt(d.x * d.x + d.y * d.y);

  var r = d
  if (dot < 0.0) {
    r = d - (2.0 * dot * n);
    var norm = sqrt(r.x * r.x + r.y * r.y);
    r = r / (norm / origV);
  }
  

  var new = this.pos:vec2 + d;
  var newX = new.x;
  var newY = new.y;

  if (newX < 0.0) {
    newX = -newX
    r = r * vec2(-0.9, 1)
  }
  if (newX > u_resolution.x) {
    newX = u_resolution.x - (newX - u_resolution.x)
    r = r * vec2(-0.9, 1)
  }
  if (newY < 0.0) {
    newY = mod(newY, u_resolution.y);
    r = vec2(r.x, -0.1)
  }
  if (newY > u_resolution.y) {
    newY = u_resolution.y - (newY - u_resolution.y);
    r = vec2(r.x, -r.y)
  }

  this.pos = vec2(newX, newY)
  this.d = r + vec2(0, -0.01)
}

static setup() {
  Filler.fillSpace("pos", vec2(512, 512))
  Turtle.setCount(300000)
  Turtle.fillRandom("pos", 0, 512)
  Turtle.fillRandomDir("d")
  Turtle.setColor()
}

static loop() {
  Filler.clear(Field);
  Filler.fillCircle(vec2(75, 75), 20, Field)
  Filler.fillCircle(vec2(300, 95), 25, Field)
  Turtle.bounce(Field)
  Turtle.setColor()
  Display.clear();
  Field.draw();
  Turtle.draw();
}
